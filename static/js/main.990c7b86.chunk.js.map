{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAEaA,G,MAAO,SAAAC,GAAK,OACpB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAqEC,IAAI,KACjF,6BACCL,EAAMG,QAAQG,OAEf,4BAAIN,EAAMG,QAAQI,aCLdC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACQD,EAAMS,SAASC,KACX,SAAAP,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJjCO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoCCG,G,wDApCb,aAAe,IAAD,8BACZ,gBAaFH,aAAe,SAAAI,GAAC,OAAI,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SAXxD,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,gEAQO,IAAD,OAClBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAY,EAAKT,SAAS,CAACT,SAAWkB,S,+BAK7C,IAAD,EAC0BC,KAAKN,MAA9Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC5CA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,gBAChD5B,EAAQI,MAAMwB,cAAcC,SAASb,EAAYY,kBAErD,OACE,sBAAK9B,UAAU,MAAf,UACE,iDACE,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAGrB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAhCZI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.990c7b86.chunk.js","sourcesContent":["import './card.styles.css';\n\nexport const Card = props =>  (\n     <div className=\"card-container\">\n         <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}  alt=\"\" />\n         <h3>\n         {props.monster.name}\n         </h3>\n         <p>{props.monster.email}</p>\n    </div>\n\n)","import {Card} from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList = props => (\n    <div className=\"card-list\">\n        {   props.monsters.map(\n                monster => <Card key={monster.id} monster={monster} />\n            )\n        }\n    </div>\n);\n\n","import './search-box.styles.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input\n    className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n    />\n)","import React, {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => users = this.setState({monsters : users}));\n  }\n\n  handleChange = e => this.setState({searchField : e.target.value});\n\n  render() {\n    const { monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n        monster.name.toLowerCase().includes(searchField.toLowerCase()) ||\n        monster.email.toLowerCase().includes(searchField.toLowerCase())\n      )\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n          <SearchBox\n            placeholder=\"search monsters\"\n            handleChange={this.handleChange}\n            />\n\n          <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}